name: .NET Console Application CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-test-publish:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: ${{ matrix.os }}

    env:
      Solution_Name: Console_Emoticon_Support.sln
      Project_Path: Console_Emoticon_Support/Console_Emoticon_Support.csproj

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore $env:Solution_Name

    - name: Syntax and code formatting check
      run: |
        dotnet format --verify-no-changes
      continue-on-error: false

    - name: Build solution (syntax error checking)
      run: dotnet build $env:Solution_Name --configuration ${{ matrix.configuration }} --no-restore

    - name: Run unit tests
      run: dotnet test $env:Solution_Name --configuration ${{ matrix.configuration }} --no-build --verbosity normal

    - name: Publish application
      run: dotnet publish $env:Project_Path --configuration ${{ matrix.configuration }} --output ./publish

    - name: Upload published artifacts
      uses: actions/upload-artifact@v4
      with:
        name: PublishedApp-${{ matrix.os }}-${{ matrix.configuration }}
        path: ./publish

  tag-version:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: build-test-publish

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Git user
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Get version from project file
      id: get_version
      run: |
        VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" Console_Emoticon_Support/Console_Emoticon_Support.csproj)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create and push tag
      run: |
        git tag "v${{ steps.get_version.outputs.version }}"
        git push origin "v${{ steps.get_version.outputs.version }}"
